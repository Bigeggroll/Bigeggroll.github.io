{"meta":{"title":"Bigeggroll","subtitle":null,"description":"java学习","author":"孔伟","url":"http://www.bigeggroll.work","root":"/"},"pages":[],"posts":[{"title":"JDK1.8后的新特性","date":"2019-01-23T13:02:30.000Z","path":"2019/01/23/JDK1.8后的新特性/","text":"JDK1.8后的新特性 在jdk1.8中对hashMap等map集合的数据结构优化。 ​ 原来的hashMap采用的数据结构是哈希表（数组+链表），hashMap默认大小是16，一个0-15索引的数组，如何往里面存储元素，首先调用元素的hashcode方法，计算出哈希码值，经过哈希算法算成数组的索引值，如果对应的索引处没有元素，直接存放，如果有对象在，那么比较它们的equals方法比较内容 ,如果内容一样，后一个value会将前一个value的值覆盖，如果不一样，在1.7的时候，后加的放在前面，形成一个链表，形成了碰撞，在某些情况下如果链表无限下去，那么效率极低，碰撞是避免不了的 ,加载因子：0.75，数组扩容，达到总容量的75%，就进行扩容，但是无法避免碰撞的情况发生,在1.8之后，在数组+链表+红黑树来实现hashmap，当碰撞的元素个数大于8时 &amp; 总容量大于64，会有红黑树的引入,除了添加之后，效率都比链表高，1.8之后链表新进元素加到末尾,ConcurrentHashMap (锁分段机制)，concurrentLevel,jdk1.8采用CAS算法(无锁算法，不再使用锁分段)，数组+链表中也引入了红黑树的使用 ###Lambda表达式 先初步的了解一下lambda表达式的应用场景 123456789101112//使用匿名内部内调用线程new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(\"来啦老弟\"); &#125;&#125;).start();//使用lambda表达式重写run方法并调用线程new Thread(() -&gt; &#123; System.out.println(\"来啦小老弟\");&#125;).start(); ####匿名内部类简化了实现类和子类的编写，使用Lambda表达式简化了部分匿名内部类的编写。 Lambda表达式的格式： 123456格式 ：(方法的参数列表)-&gt;&#123;方法体&#125;（形式参数）：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可-&gt; : 由英文中画线和大于符号组成，固定写法。代表指向动作&#123;代码块&#125; ：是我们具体要做的事情，也就是以前我们写的方法体内容组成Lambda表达式的三要素： 形式参数，箭头，代码块 Lambda表达式用于自定义的类的用法 Lambda表达式用于无参数的情况 123456789101112131415161718192021public interface EatAble &#123; void eat();&#125;public class LambdaDemo &#123; public static void main(String[] args) &#123; //使用匿名内部内调用eat方法 eatAble(new EatAble() &#123; @Override public void eat() &#123; System.out.println(\"吃大苹果\"); &#125; &#125;); //使用lambda表达式重写eat方法并调用 eatAble(() -&gt;&#123; System.out.println(\"吃苹果\"); &#125;); &#125; public static void eatAble(EatAble e)&#123; e.eat(); &#125;&#125; Lambda表达式用于有参数的情况 1234567891011121314151617181920public interface Fly &#123; void fly(String s);&#125;//匿名内部内flyAble(new Fly() &#123; @Override public void fly(String s) &#123; System.out.println(s); System.out.println(\"飞机起飞了\"); &#125;&#125;);//有参的lambda表达式flyAble((String s)-&gt;&#123; System.out.println(s); System.out.println(\"飞机又起飞了\");&#125;);public static void flyAble(Fly f)&#123; f.fly(\"开飞机喽\");&#125; Lambda表达式用于有参数有返回值的情况 12345678910111213141516171819public interface AddAble &#123; int add(int a,int b);&#125;addAble(new AddAble() &#123; @Override public int add(int a, int b) &#123; return a+b; &#125;&#125;);//lambda有参有返回值类型addAble((int a,int b) -&gt;&#123; return a+b;&#125;);public static void addAble(AddAble a)&#123; int i = a.add(2, 3); System.out.println(i);&#125; 以上是Lambda基础的用法，Lambda还能够更加的简化，可以根据不同的情况进行简化 简化规则： 参数类型可以省略。但是有多个参数的情况下，不能只省略一个 如果参数有且仅有一个，那么小括号可以省略 如果代码块的语句只有一条，可以省略大括号和分号，和return关键字 1234567891011121314151617181920212223public interface EatAble &#123; void eat();&#125;public interface Fly &#123; void fly(String s);&#125;addAble((int a,int b) -&gt;&#123; return a+b;&#125;);//参数的类型可以省略 useAddable((x, y) -&gt; &#123; return x + y; &#125;);useFlyable((String s) -&gt; &#123; System.out.println(s); &#125;);//如果参数有且仅有一个，那么小括号可以省略 useFlyable(s -&gt; &#123; System.out.println(s); &#125;);//如果代码块的语句只有一条，可以省略大括号和分号 useFlyable(s -&gt; System.out.println(s));//如果代码块的语句只有一条，可以省略大括号和分号，如果有return，return也要省略掉 useAddable((x, y) -&gt; x + y); Lambda表达式的注意事项​ 使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法 ​ 必须有上下文环境，才能推导出Lambda对应的接口 根据局部变量的赋值得知Lambda对应的接口 Runnable r = () -&gt; System.out.println(“Lambda表达式”); 根据调用方法的参数得知Lambda对应的接口 new Thread(() -&gt; System.out.println(“Lambda表达式”)).start(); Lambda表达式和匿名内部类的区别 所需类型不同 匿名内部类：可以是接口，也可以是抽象类，还可以是具体类 Lambda表达式：只能是接口 使用限制不同 如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类 如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式 实现原理不同 匿名内部类：编译之后，产生一个单独的.class字节码文件 Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时 候动态生成 接口接口组成更新概述1. 常量 public static final 2. 抽象方法 public abstract 3. 默认方法(Java 8) 4. 静态方法(Java 8) 5. 私有方法(Java 9)接口中默认方法12格式 public default 返回值类型 方法名(参数列表) &#123; &#125; 注意事项 默认方法不是抽象方法，所不以强制被重写。但是可以被重写，重写的时候去掉default关键字 public可以省略，default不能省略 接口中静态方法12格式public static 返回值类型 方法名(参数列表) &#123; &#125; 注意事项 静态方法只能通过接口名调用，不能通过实现类名或者对象名调用 public可以省略，static不能省略 接口中私有方法私有方法产生原因 ​ Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的 默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实 现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用 私有给隐藏起来，这就是Java 9增加私有方法的必然性 定义格式 1234格式1private 返回值类型 方法名(参数列表) &#123; &#125; 格式2private static 返回值类型 方法名(参数列表) &#123; &#125; 注意事项 默认方法可以调用私有的静态方法和非静态方法 静态方法只能调用私有的静态方法 方法引用方法引用的出现原因 ​ 在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作 那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再 写重复逻辑呢？答案肯定是没有必要 那我们又是如何使用已经存在的方案的呢？ 这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案 代码演示 123456789101112131415161718public interface Printable &#123; void printString(String s); &#125; public class PrintableDemo &#123; public static void main(String[] args) &#123; //在主方法中调用usePrintable方法 // usePrintable((String s) -&gt; &#123; // System.out.println(s); // &#125;); //Lambda简化写法 usePrintable(s -&gt; System.out.println(s)); //方法引用 usePrintable(System.out::println); &#125; private static void usePrintable(Printable p) &#123; p.printString(\"来啦\"); &#125; &#125; 方法引用符 :: 该符号为引用运算符，而它所在的表达式被称为方法引用 推导与省略 如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载 形式， 它们都将被自动推导 如果使用方法引用，也是同样可以根据上下文进行推导 方法引用是Lambda的孪生兄弟 引用类方法 ​ 引用类方法，其实就是引用类的静态方法 格式 ​ 类名::静态方法 ​ 范例 ：Integer::parseInt ​ Integer类的方法：public static int parseInt(String s) 将此String转换为int类型数据 123456789101112131415public interface Converter &#123; int convert(String s); &#125; public class ConverterDemo &#123; public static void main(String[] args) &#123; //Lambda写法 useConverter(s -&gt; Integer.parseInt(s)); //引用类方法 useConverter(Integer::parseInt); &#125; private static void useConverter(Converter c) &#123; int number = c.convert(\"666\"); System.out.println(number); &#125; &#125; 使用说明 Lambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数 引用对象的实例方法 引用对象的实例方法，其实就引用类中的成员方法 格式 ​ 对象::成员方法 范例 ​ “HelloWorld”::toUpperCase ​ String类中的方法：public String toUpperCase() 将此String所有字符转换为大写 12345678910111213141516171819202122public class PrintString &#123; //把字符串参数变成大写的数据，然后在控制台输出 public void printUpper(String s) &#123; String result = s.toUpperCase(); System.out.println(result); &#125; &#125;public interface Printer &#123; void printUpperCase(String s); &#125; public class PrinterDemo &#123; public static void main(String[] args) &#123; //Lambda简化写法 usePrinter(s -&gt; System.out.println(s.toUpperCase())); //引用对象的实例方法 PrintString ps = new PrintString(); usePrinter(ps::printUpper); &#125; private static void usePrinter(Printer p) &#123; p.printUpperCase(\"HelloWorld\"); &#125; &#125; 使用说明 Lambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数 引用类的实例方法 引用类的实例方法，其实就是引用类中的成员方法 格式 ​ 类名::成员方法 范例 ​ String::substring public String substring(int beginIndex,int endIndex) ​ 从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex 12345678910111213public interface MyString &#123; String mySubString(String s,int x,int y); &#125;public class MyS tringDemo &#123; public static void main(String[] args) &#123; //Lambda简化写法 useMyString((s,x,y) -&gt; s.substring(x,y)); //引用类的实例方法 useMyString(String::substring); &#125; private static void useMyString(MyString my) &#123; String s = my.mySubString(\"HelloWorld\", 2, 5); System.out.println(s); &#125; &#125; 使用说明 Lambda表达式被类的实例方法替代的时候 第一个参数作为调用者 后面的参数全部传递给该方法作为参数 引用构造器 引用构造器，其实就是引用构造方法 格式 ​ 类名::new 范例 ：Student::new 123456789101112131415public interface StudentBuilder &#123; Student build(String name,int age); &#125; public class StudentDemo &#123; public static void main(String[] args) &#123; //Lambda简化写法 useStudentBuilder((name,age) -&gt; new Student(name,age)); //引用构造器 useStudentBuilder(Student::new); &#125; private static void useStudentBuilder(StudentBuilder sb) &#123; Student s = sb.build(\"林青霞\", 30); System.out.println(s.getName() + \",\" + s.getAge()); &#125; &#125; 使用说明 Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数","raw":"---\ntitle: JDK1.8后的新特性\ndate: 2019-01-23 21:02:30\ntags:\n---\n\n\n\n## JDK1.8后的新特性 \n\n> 在jdk1.8中对hashMap等map集合的数据结构优化。\n>\n> ​\t原来的hashMap采用的数据结构是哈希表（数组+链表），hashMap默认大小是16，一个0-15索引的数组，如何往里面存储元素，首先调用元素的hashcode方法，计算出哈希码值，经过哈希算法算成数组的索引值，如果对应的索引处没有元素，直接存放，如果有对象在，那么比较它们的equals方法比较内容 ,如果内容一样，后一个value会将前一个value的值覆盖，如果不一样，在1.7的时候，后加的放在前面，形成一个链表，形成了碰撞，在某些情况下如果链表无限下去，那么效率极低，碰撞是避免不了的 ,加载因子：0.75，数组扩容，达到总容量的75%，就进行扩容，但是无法避免碰撞的情况发生,在1.8之后，在数组+链表+红黑树来实现hashmap，当碰撞的元素个数大于8时 & 总容量大于64，会有红黑树的引入,除了添加之后，效率都比链表高，1.8之后链表新进元素加到末尾,ConcurrentHashMap (锁分段机制)，concurrentLevel,jdk1.8采用CAS算法(无锁算法，不再使用锁分段)，数组+链表中也引入了红黑树的使用\n\n\n\n###Lambda表达式 \n\n先初步的了解一下lambda表达式的应用场景 \n\n```java\n                        //使用匿名内部内调用线程\n                        new Thread(new Runnable() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"来啦老弟\");\n                            }\n                        }).start();\n\n                        //使用lambda表达式重写run方法并调用线程\n                        new Thread(() -> {\n                            System.out.println(\"来啦小老弟\");\n                        }).start();\n```\n\n####匿名内部类简化了实现类和子类的编写，使用Lambda表达式简化了部分匿名内部类的编写。 \n\nLambda表达式的格式： \n\n```java\n格式 ：(方法的参数列表)->{方法体}\n（形式参数）：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可\n-> : 由英文中画线和大于符号组成，固定写法。代表指向动作\n{代码块} ：是我们具体要做的事情，也就是以前我们写的方法体内容\n组成Lambda表达式的三要素：\n     形式参数，箭头，代码块\n```\n\n##### Lambda表达式用于自定义的类的用法 \n\n- Lambda表达式用于无参数的情况\n\n```java\npublic interface EatAble {\n    void eat();\n}\npublic class LambdaDemo {\n    public static void main(String[] args) {\n    //使用匿名内部内调用eat方法\n        eatAble(new EatAble() {\n            @Override\n            public void eat() {\n                System.out.println(\"吃大苹果\");\n            }\n        });\n        //使用lambda表达式重写eat方法并调用\n        eatAble(() ->{\n            System.out.println(\"吃苹果\");\n        });\n    }\n    public static void eatAble(EatAble e){\n        e.eat();\n    }\n}\n```\n\n- Lambda表达式用于有参数的情况\n\n```java\npublic interface Fly {\n    void fly(String s);\n}\n//匿名内部内\nflyAble(new Fly() {\n    @Override\n    public void fly(String s) {\n        System.out.println(s);\n        System.out.println(\"飞机起飞了\");\n    }\n});\n//有参的lambda表达式\nflyAble((String s)->{\n    System.out.println(s);\n    System.out.println(\"飞机又起飞了\");\n});\n\npublic static void flyAble(Fly f){\n    f.fly(\"开飞机喽\");\n}\n```\n\n- Lambda表达式用于有参数有返回值的情况\n\n```java\npublic interface AddAble {\n    int add(int a,int b);\n}\n\naddAble(new AddAble() {\n    @Override\n    public int add(int a, int b) {\n        return a+b;\n    }\n});\n//lambda有参有返回值类型\naddAble((int a,int b) ->{\n    return a+b;\n});\n\npublic static void addAble(AddAble a){\n    int i = a.add(2, 3);\n    System.out.println(i);\n}\n```\n\n以上是Lambda基础的用法，Lambda还能够更加的简化，可以根据不同的情况进行简化\n\n\n\n###### 简化规则：\n\n1. 参数类型可以省略。但是有多个参数的情况下，不能只省略一个 \n2. 如果参数有且仅有一个，那么小括号可以省略 \n3. 如果代码块的语句只有一条，可以省略大括号和分号，和return关键字\n\n```java\npublic interface EatAble {\n    void eat();\n}\npublic interface Fly {\n    void fly(String s);\n}\n\naddAble((int a,int b) ->{\n    return a+b;\n});\n//参数的类型可以省略 \nuseAddable((x, y) -> { \n    return x + y; \n});\nuseFlyable((String s) -> { System.out.println(s); });\n//如果参数有且仅有一个，那么小括号可以省略 \nuseFlyable(s -> {  System.out.println(s);  });\n\n//如果代码块的语句只有一条，可以省略大括号和分号 \nuseFlyable(s -> System.out.println(s));\n\n//如果代码块的语句只有一条，可以省略大括号和分号，如果有return，return也要省略掉 \nuseAddable((x, y) -> x + y);\n```\n\n###### Lambda表达式的注意事项 \n\n​\t使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法 \n\n​\t必须有上下文环境，才能推导出Lambda对应的接口 \n\n- - 根据局部变量的赋值得知Lambda对应的接口 \n\n  - Runnable r = () -> System.out.println(\"Lambda表达式\"); \n\n- - 根据调用方法的参数得知Lambda对应的接口\n\n  - new Thread(() -> System.out.println(\"Lambda表达式\")).start();\n\n###### Lambda表达式和匿名内部类的区别 \n\n1. 所需类型不同 \n\n   匿名内部类：可以是接口，也可以是抽象类，还可以是具体类 \n\n   Lambda表达式：只能是接口 \n\n2. 使用限制不同 \n\n   如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类 \n\n   如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式 \n\n3. 实现原理不同 \n\n   匿名内部类：编译之后，产生一个单独的.class字节码文件\n\n   Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时\t   \t\t\t\t候动态生成\n\n\n\n### 接口 \n\n##### \t接口组成更新概述\t \n\n    1. 常量 public static final \n    2. 抽象方法 public abstract \n    3. 默认方法(Java 8) \n    4. 静态方法(Java 8) \n    5. 私有方法(Java 9)\n\n###### 接口中默认方法 \n\n```java\n格式\n public default 返回值类型 方法名(参数列表) { } \n```\n\n注意事项 \n\n- 默认方法不是抽象方法，所不以强制被重写。但是可以被重写，重写的时候去掉default关键字 \n- public可以省略，default不能省略\n\n###### 接口中静态方法 \n\n```java\n格式\npublic static 返回值类型 方法名(参数列表) { }\n```\n\n注意事项 \n\n- 静态方法只能通过接口名调用，不能通过实现类名或者对象名调用 \n- public可以省略，static不能省略\n\n###### 接口中私有方法 \n\n私有方法产生原因 \n\n​\tJava 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的 默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实 现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用 私有给隐藏起来，这就是Java 9增加私有方法的必然性\n\n定义格式 \n\n```java\n格式1\nprivate 返回值类型 方法名(参数列表) { } \n格式2\nprivate static 返回值类型 方法名(参数列表) { } \n```\n\n注意事项 \n\n- 默认方法可以调用私有的静态方法和非静态方法\n- 静态方法只能调用私有的静态方法\n\n\n\n### 方法引用 \n\n方法引用的出现原因\n\n​\t在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作 那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再 写重复逻辑呢？答案肯定是没有必要 那我们又是如何使用已经存在的方案的呢？ 这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案\n\n代码演示 \n\n```java\npublic interface Printable {\n     void printString(String s);\n } \npublic class PrintableDemo { \n    public static void main(String[] args) {\n     //在主方法中调用usePrintable方法 \n    // usePrintable((String s) -> { \n    // System.out.println(s);\n     // });\n     //Lambda简化写法\n    usePrintable(s -> System.out.println(s)); \n    //方法引用 \n    usePrintable(System.out::println); \n    }\n    private static void usePrintable(Printable p) { \n        p.printString(\"来啦\"); \n    } \n}\n```\n\n方法引用符\n\n \t:: 该符号为引用运算符，而它所在的表达式被称为方法引用 \n\n推导与省略 \n\n- 如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载\t形式， 它们都将被自动推导 \n- 如果使用方法引用，也是同样可以根据上下文进行推导 \n- 方法引用是Lambda的孪生兄弟\n\n引用类方法\n\n​\t引用类方法，其实就是引用类的静态方法\n\n格式 \n\n​\t类名::静态方法 \n\n​\t范例 ：Integer::parseInt \n\n​\tInteger类的方法：public static int parseInt(String s) 将此String转换为int类型数据 \n\n\n\n\n\n```java\npublic interface Converter { \n    int convert(String s); \n} \npublic class ConverterDemo { \n    public static void main(String[] args) { \n        //Lambda写法 \n        useConverter(s -> Integer.parseInt(s));\n         //引用类方法 \n        useConverter(Integer::parseInt); \n    } \n    private static void useConverter(Converter c) { \n        int number = c.convert(\"666\"); \n        System.out.println(number); \n    } \n}\n```\n\n使用说明 \n\nLambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数\n\n引用对象的实例方法\n\n引用对象的实例方法，其实就引用类中的成员方法 \n\n格式 \n\n​\t对象::成员方法 \n\n范例 \n\n​\t\"HelloWorld\"::toUpperCase \n\n​\tString类中的方法：public String toUpperCase() 将此String所有字符转换为大写 \n\n\n\n\n\n```java\npublic class PrintString { \n    //把字符串参数变成大写的数据，然后在控制台输出 \n    public void printUpper(String s) { \n    String result = s.toUpperCase(); \n    System.out.println(result); \n    } \n}\npublic interface Printer { \n    void printUpperCase(String s); \n} \npublic class PrinterDemo { \n    public static void main(String[] args) { \n    //Lambda简化写法 \n    usePrinter(s -> System.out.println(s.toUpperCase()));\n     //引用对象的实例方法 \n    PrintString ps = new PrintString(); \n    usePrinter(ps::printUpper); \n    } \n    private static void usePrinter(Printer p) { \n        p.printUpperCase(\"HelloWorld\");\n     } \n}\n```\n\n使用说明 \n\nLambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数\n\n引用类的实例方法\n\n引用类的实例方法，其实就是引用类中的成员方法 \n\n格式 \n\n​\t类名::成员方法 \n\n范例 \n\n​\tString::substring public String substring(int beginIndex,int endIndex) \n\n​\t从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex\n\n\n\n\n\n```java\npublic interface MyString { \n    String mySubString(String s,int x,int y); \n}\npublic class MyS tringDemo { \n    public static void main(String[] args) { \n    //Lambda简化写法 \n    useMyString((s,x,y) -> s.substring(x,y));\n     //引用类的实例方法 useMyString(String::substring); \n    } \n    private static void useMyString(MyString my) {\n         String s = my.mySubString(\"HelloWorld\", 2, 5); System.out.println(s); \n    } \n}\n```\n\n使用说明 \n\nLambda表达式被类的实例方法替代的时候 第一个参数作为调用者 后面的参数全部传递给该方法作为参数\n\n引用构造器\n\n引用构造器，其实就是引用构造方法 \n\n格式 \n\n​\t类名::new \n\n范例  ：Student::new\n\n```java\npublic interface StudentBuilder { \n    Student build(String name,int age); \n} \npublic class StudentDemo { \n    public static void main(String[] args) { \n        //Lambda简化写法 \n        useStudentBuilder((name,age) -> new Student(name,age)); \n        //引用构造器 \n        useStudentBuilder(Student::new); \n    } \n    private static void useStudentBuilder(StudentBuilder sb) { \n        Student s = sb.build(\"林青霞\", 30); \n        System.out.println(s.getName() + \",\" + s.getAge());\n    } \n}\n```\n\n使用说明 \n\nLambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数","content":"<h2 id=\"JDK1-8后的新特性\"><a href=\"#JDK1-8后的新特性\" class=\"headerlink\" title=\"JDK1.8后的新特性\"></a>JDK1.8后的新特性</h2><blockquote>\n<p>在jdk1.8中对hashMap等map集合的数据结构优化。</p>\n<p>​    原来的hashMap采用的数据结构是哈希表（数组+链表），hashMap默认大小是16，一个0-15索引的数组，如何往里面存储元素，首先调用元素的hashcode方法，计算出哈希码值，经过哈希算法算成数组的索引值，如果对应的索引处没有元素，直接存放，如果有对象在，那么比较它们的equals方法比较内容 ,如果内容一样，后一个value会将前一个value的值覆盖，如果不一样，在1.7的时候，后加的放在前面，形成一个链表，形成了碰撞，在某些情况下如果链表无限下去，那么效率极低，碰撞是避免不了的 ,加载因子：0.75，数组扩容，达到总容量的75%，就进行扩容，但是无法避免碰撞的情况发生,在1.8之后，在数组+链表+红黑树来实现hashmap，当碰撞的元素个数大于8时 &amp; 总容量大于64，会有红黑树的引入,除了添加之后，效率都比链表高，1.8之后链表新进元素加到末尾,ConcurrentHashMap (锁分段机制)，concurrentLevel,jdk1.8采用CAS算法(无锁算法，不再使用锁分段)，数组+链表中也引入了红黑树的使用</p>\n</blockquote>\n<p>###Lambda表达式 </p>\n<p>先初步的了解一下lambda表达式的应用场景 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用匿名内部内调用线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来啦老弟\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用lambda表达式重写run方法并调用线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"来啦小老弟\"</span>);</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n\n<p>####匿名内部类简化了实现类和子类的编写，使用Lambda表达式简化了部分匿名内部类的编写。 </p>\n<p>Lambda表达式的格式： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 ：(方法的参数列表)-&gt;&#123;方法体&#125;</span><br><span class=\"line\">（形式参数）：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可</span><br><span class=\"line\">-&gt; : 由英文中画线和大于符号组成，固定写法。代表指向动作</span><br><span class=\"line\">&#123;代码块&#125; ：是我们具体要做的事情，也就是以前我们写的方法体内容</span><br><span class=\"line\">组成Lambda表达式的三要素：</span><br><span class=\"line\">     形式参数，箭头，代码块</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Lambda表达式用于自定义的类的用法\"><a href=\"#Lambda表达式用于自定义的类的用法\" class=\"headerlink\" title=\"Lambda表达式用于自定义的类的用法\"></a>Lambda表达式用于自定义的类的用法</h5><ul>\n<li>Lambda表达式用于无参数的情况</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EatAble</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用匿名内部内调用eat方法</span></span><br><span class=\"line\">        eatAble(<span class=\"keyword\">new</span> EatAble() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"吃大苹果\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//使用lambda表达式重写eat方法并调用</span></span><br><span class=\"line\">        eatAble(() -&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"吃苹果\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">eatAble</span><span class=\"params\">(EatAble e)</span></span>&#123;</span><br><span class=\"line\">        e.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Lambda表达式用于有参数的情况</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fly</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//匿名内部内</span></span><br><span class=\"line\">flyAble(<span class=\"keyword\">new</span> Fly() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"飞机起飞了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//有参的lambda表达式</span></span><br><span class=\"line\">flyAble((String s)-&gt;&#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"飞机又起飞了\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">flyAble</span><span class=\"params\">(Fly f)</span></span>&#123;</span><br><span class=\"line\">    f.fly(<span class=\"string\">\"开飞机喽\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Lambda表达式用于有参数有返回值的情况</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AddAble</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addAble(<span class=\"keyword\">new</span> AddAble() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//lambda有参有返回值类型</span></span><br><span class=\"line\">addAble((<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b) -&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addAble</span><span class=\"params\">(AddAble a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = a.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是Lambda基础的用法，Lambda还能够更加的简化，可以根据不同的情况进行简化</p>\n<h6 id=\"简化规则：\"><a href=\"#简化规则：\" class=\"headerlink\" title=\"简化规则：\"></a>简化规则：</h6><ol>\n<li>参数类型可以省略。但是有多个参数的情况下，不能只省略一个 </li>\n<li>如果参数有且仅有一个，那么小括号可以省略 </li>\n<li>如果代码块的语句只有一条，可以省略大括号和分号，和return关键字</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EatAble</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fly</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addAble((<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b) -&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//参数的类型可以省略 </span></span><br><span class=\"line\">useAddable((x, y) -&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">useFlyable((String s) -&gt; &#123; System.out.println(s); &#125;);</span><br><span class=\"line\"><span class=\"comment\">//如果参数有且仅有一个，那么小括号可以省略 </span></span><br><span class=\"line\">useFlyable(s -&gt; &#123;  System.out.println(s);  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果代码块的语句只有一条，可以省略大括号和分号 </span></span><br><span class=\"line\">useFlyable(s -&gt; System.out.println(s));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果代码块的语句只有一条，可以省略大括号和分号，如果有return，return也要省略掉 </span></span><br><span class=\"line\">useAddable((x, y) -&gt; x + y);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Lambda表达式的注意事项\"><a href=\"#Lambda表达式的注意事项\" class=\"headerlink\" title=\"Lambda表达式的注意事项\"></a>Lambda表达式的注意事项</h6><p>​    使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法 </p>\n<p>​    必须有上下文环境，才能推导出Lambda对应的接口 </p>\n<ul>\n<li><ul>\n<li><p>根据局部变量的赋值得知Lambda对应的接口 </p>\n</li>\n<li><p>Runnable r = () -&gt; System.out.println(“Lambda表达式”); </p>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><p>根据调用方法的参数得知Lambda对应的接口</p>\n</li>\n<li><p>new Thread(() -&gt; System.out.println(“Lambda表达式”)).start();</p>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"Lambda表达式和匿名内部类的区别\"><a href=\"#Lambda表达式和匿名内部类的区别\" class=\"headerlink\" title=\"Lambda表达式和匿名内部类的区别\"></a>Lambda表达式和匿名内部类的区别</h6><ol>\n<li><p>所需类型不同 </p>\n<p>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类 </p>\n<p>Lambda表达式：只能是接口 </p>\n</li>\n<li><p>使用限制不同 </p>\n<p>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类 </p>\n<p>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式 </p>\n</li>\n<li><p>实现原理不同 </p>\n<p>匿名内部类：编译之后，产生一个单独的.class字节码文件</p>\n<p>Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时                       候动态生成</p>\n</li>\n</ol>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h5 id=\"接口组成更新概述\"><a href=\"#接口组成更新概述\" class=\"headerlink\" title=\"接口组成更新概述\"></a>接口组成更新概述</h5><pre><code>1. 常量 public static final \n2. 抽象方法 public abstract \n3. 默认方法(Java 8) \n4. 静态方法(Java 8) \n5. 私有方法(Java 9)</code></pre><h6 id=\"接口中默认方法\"><a href=\"#接口中默认方法\" class=\"headerlink\" title=\"接口中默认方法\"></a>接口中默认方法</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">default</span> 返回值类型 方法名(参数列表) &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意事项 </p>\n<ul>\n<li>默认方法不是抽象方法，所不以强制被重写。但是可以被重写，重写的时候去掉default关键字 </li>\n<li>public可以省略，default不能省略</li>\n</ul>\n<h6 id=\"接口中静态方法\"><a href=\"#接口中静态方法\" class=\"headerlink\" title=\"接口中静态方法\"></a>接口中静态方法</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 返回值类型 方法名(参数列表) &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意事项 </p>\n<ul>\n<li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用 </li>\n<li>public可以省略，static不能省略</li>\n</ul>\n<h6 id=\"接口中私有方法\"><a href=\"#接口中私有方法\" class=\"headerlink\" title=\"接口中私有方法\"></a>接口中私有方法</h6><p>私有方法产生原因 </p>\n<p>​    Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的 默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实 现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用 私有给隐藏起来，这就是Java 9增加私有方法的必然性</p>\n<p>定义格式 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> 返回值类型 方法名(参数列表) &#123; &#125; </span><br><span class=\"line\">格式<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> 返回值类型 方法名(参数列表) &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意事项 </p>\n<ul>\n<li>默认方法可以调用私有的静态方法和非静态方法</li>\n<li>静态方法只能调用私有的静态方法</li>\n</ul>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p>方法引用的出现原因</p>\n<p>​    在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作 那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再 写重复逻辑呢？答案肯定是没有必要 那我们又是如何使用已经存在的方案的呢？ 这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案</p>\n<p>代码演示 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Printable</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printString</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintableDemo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//在主方法中调用usePrintable方法 </span></span><br><span class=\"line\">    <span class=\"comment\">// usePrintable((String s) -&gt; &#123; </span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(s);</span></span><br><span class=\"line\">     <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">     <span class=\"comment\">//Lambda简化写法</span></span><br><span class=\"line\">    usePrintable(s -&gt; System.out.println(s)); </span><br><span class=\"line\">    <span class=\"comment\">//方法引用 </span></span><br><span class=\"line\">    usePrintable(System.out::println); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">usePrintable</span><span class=\"params\">(Printable p)</span> </span>&#123; </span><br><span class=\"line\">        p.printString(<span class=\"string\">\"来啦\"</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法引用符</p>\n<pre><code>:: 该符号为引用运算符，而它所在的表达式被称为方法引用 </code></pre><p>推导与省略 </p>\n<ul>\n<li>如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载    形式， 它们都将被自动推导 </li>\n<li>如果使用方法引用，也是同样可以根据上下文进行推导 </li>\n<li>方法引用是Lambda的孪生兄弟</li>\n</ul>\n<p>引用类方法</p>\n<p>​    引用类方法，其实就是引用类的静态方法</p>\n<p>格式 </p>\n<p>​    类名::静态方法 </p>\n<p>​    范例 ：Integer::parseInt </p>\n<p>​    Integer类的方法：public static int parseInt(String s) 将此String转换为int类型数据 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Converter</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">convert</span><span class=\"params\">(String s)</span></span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConverterDemo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//Lambda写法 </span></span><br><span class=\"line\">        useConverter(s -&gt; Integer.parseInt(s));</span><br><span class=\"line\">         <span class=\"comment\">//引用类方法 </span></span><br><span class=\"line\">        useConverter(Integer::parseInt); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useConverter</span><span class=\"params\">(Converter c)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">int</span> number = c.convert(<span class=\"string\">\"666\"</span>); </span><br><span class=\"line\">        System.out.println(number); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用说明 </p>\n<p>Lambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数</p>\n<p>引用对象的实例方法</p>\n<p>引用对象的实例方法，其实就引用类中的成员方法 </p>\n<p>格式 </p>\n<p>​    对象::成员方法 </p>\n<p>范例 </p>\n<p>​    “HelloWorld”::toUpperCase </p>\n<p>​    String类中的方法：public String toUpperCase() 将此String所有字符转换为大写 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintString</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//把字符串参数变成大写的数据，然后在控制台输出 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printUpper</span><span class=\"params\">(String s)</span> </span>&#123; </span><br><span class=\"line\">    String result = s.toUpperCase(); </span><br><span class=\"line\">    System.out.println(result); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Printer</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUpperCase</span><span class=\"params\">(String s)</span></span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterDemo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//Lambda简化写法 </span></span><br><span class=\"line\">    usePrinter(s -&gt; System.out.println(s.toUpperCase()));</span><br><span class=\"line\">     <span class=\"comment\">//引用对象的实例方法 </span></span><br><span class=\"line\">    PrintString ps = <span class=\"keyword\">new</span> PrintString(); </span><br><span class=\"line\">    usePrinter(ps::printUpper); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">usePrinter</span><span class=\"params\">(Printer p)</span> </span>&#123; </span><br><span class=\"line\">        p.printUpperCase(<span class=\"string\">\"HelloWorld\"</span>);</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用说明 </p>\n<p>Lambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数</p>\n<p>引用类的实例方法</p>\n<p>引用类的实例方法，其实就是引用类中的成员方法 </p>\n<p>格式 </p>\n<p>​    类名::成员方法 </p>\n<p>范例 </p>\n<p>​    String::substring public String substring(int beginIndex,int endIndex) </p>\n<p>​    从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyString</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">mySubString</span><span class=\"params\">(String s,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyS</span> <span class=\"title\">tringDemo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//Lambda简化写法 </span></span><br><span class=\"line\">    useMyString((s,x,y) -&gt; s.substring(x,y));</span><br><span class=\"line\">     <span class=\"comment\">//引用类的实例方法 useMyString(String::substring); </span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useMyString</span><span class=\"params\">(MyString my)</span> </span>&#123;</span><br><span class=\"line\">         String s = my.mySubString(<span class=\"string\">\"HelloWorld\"</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>); System.out.println(s); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用说明 </p>\n<p>Lambda表达式被类的实例方法替代的时候 第一个参数作为调用者 后面的参数全部传递给该方法作为参数</p>\n<p>引用构造器</p>\n<p>引用构造器，其实就是引用构造方法 </p>\n<p>格式 </p>\n<p>​    类名::new </p>\n<p>范例  ：Student::new</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentBuilder</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\">Student <span class=\"title\">build</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDemo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//Lambda简化写法 </span></span><br><span class=\"line\">        useStudentBuilder((name,age) -&gt; <span class=\"keyword\">new</span> Student(name,age)); </span><br><span class=\"line\">        <span class=\"comment\">//引用构造器 </span></span><br><span class=\"line\">        useStudentBuilder(Student::<span class=\"keyword\">new</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useStudentBuilder</span><span class=\"params\">(StudentBuilder sb)</span> </span>&#123; </span><br><span class=\"line\">        Student s = sb.build(<span class=\"string\">\"林青霞\"</span>, <span class=\"number\">30</span>); </span><br><span class=\"line\">        System.out.println(s.getName() + <span class=\"string\">\",\"</span> + s.getAge());</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用说明 </p>\n<p>Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</p>\n","slug":"JDK1.8后的新特性","updated":"2019-09-26T08:39:45.573Z","comments":true,"link":"","permalink":"http://www.bigeggroll.work/2019/01/23/JDK1.8后的新特性/","excerpt":"","categories":[],"tags":[]},{"title":"servlet绘制验证码","date":"2019-01-09T10:34:30.000Z","path":"2019/01/09/servlet绘制验证码/","text":"###servlet在线生成验证码 ####初步生成版 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package work.eggroll.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;@WebServlet(\"/访问路径\")public class CheckCodeServlet extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; int width = 100; int height = 50; //1.创建一对象，在内存中图片(验证码图片对象) BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB); //2.美化图片 //2.1 填充背景色 Graphics g = image.getGraphics();//画笔对象 g.setColor(Color.PINK);//设置画笔颜色 g.fillRect(0,0,width,height); //2.2画边框 g.setColor(Color.black); g.drawRect(0,0,width - 1,height - 1); String str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789\"; //生成随机角标 Random ran = new Random(); StringBuilder sb = new StringBuilder(); for (int i = 1; i &lt;= 4; i++) &#123; int index = ran.nextInt(str.length()); //获取字符 char ch = str.charAt(index);//随机字符 sb.append(ch); //2.3写验证码 g.drawString(ch+\"\",width/5*i,height/2); &#125; //2.4画干扰线 g.setColor(Color.red); //随机生成坐标点 for (int i = 0; i &lt; 10; i++) &#123; int x1 = ran.nextInt(width); int x2 = ran.nextInt(width); int y1 = ran.nextInt(height); int y2 = ran.nextInt(height); g.drawLine(x1,y1,x2,y2); &#125; //3.将图片输出到页面展示 ImageIO.write(image,\"jpg\",response.getOutputStream()); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; this.doPost(request,response); &#125;&#125; ####加强版 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162package work.eggroll.web.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;/** * 生成验证码图片 * * */@WebServlet(\"/访问路径\")public class CheckCodeServlet extends HttpServlet &#123; public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; int width = 130; int height = 35; // 步骤一 绘制一张内存中图片 BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); // 步骤二 图片绘制背景颜色 ---通过绘图对象 Graphics graphics = bufferedImage.getGraphics();// 得到画图对象 --- 画笔 // 绘制任何图形之前 都必须指定一个颜色 graphics.setColor(getRandColor(200, 250)); graphics.fillRect(0, 0, width, height); // 步骤三 绘制边框 graphics.setColor(Color.WHITE); graphics.drawRect(0, 0, width - 1, height - 1); // 步骤四 四个随机数字 Graphics2D graphics2d = (Graphics2D) graphics; // 设置输出字体 graphics2d.setFont(new Font(\"宋体\", Font.BOLD, 28)); String words =\"0123456789\"; String operators=\"+-*\"; Random random = new Random();// 生成随机数 //定义StringBuilder拼接验证码字符 StringBuilder sBuilder=new StringBuilder(); // 定义x坐标 int x = 10; //定义数组保存生成的数字，后面计算结果使用 int[] nums=new int[2]; //定义变量保存运算符，后面计算结果使用 String operator=\"\"; for (int i = 0; i &lt; 2; i++) &#123; // 随机颜色 graphics2d.setColor(new Color(20 + random.nextInt(110), 20 + random .nextInt(110), 20 + random.nextInt(110))); // 旋转 -30 --- 30度 int jiaodu = random.nextInt(60) - 30; // 换算弧度 double theta = jiaodu * Math.PI / 180; // 生成一个随机数字 int index = random.nextInt(words.length()); // 生成随机数 0 到 length - 1 // 获得数字 char c = words.charAt(index); //保存到数组中,后面计算结果用 nums[i]=Integer.parseInt(c+\"\"); //拼接字符 sBuilder.append(c); // 将c 输出到图片 graphics2d.rotate(theta, x, 20); graphics2d.drawString(String.valueOf(c), x, 25); graphics2d.rotate(-theta, x, 20); x += 30; //生成运算符 if(i==0)&#123; // 生成一个随机数字 index = random.nextInt(operators.length()); // 生成随机数 0 到 length - 1 // 获得运算符 operator = operators.charAt(index)+\"\"; //拼接字符 sBuilder.append(operator); // 将c 输出到图片 graphics2d.drawString(operator, x, 25); &#125;else&#123; //拼接=号 sBuilder.append(\"=\"); // 将c 输出到图片 graphics2d.drawString(\"=\", x, 25); &#125; x += 30; &#125; //计算结果 int result=0; if(\"+\".equals(operator))&#123; result=nums[0]+nums[1]; &#125;else if(\"-\".equals(operator))&#123; result=nums[0]-nums[1]; &#125;else&#123; result=nums[0]*nums[1]; &#125; //控制台打印验证码和计算结果 System.out.println(nums[0]+operator+nums[1]+\"=\"+result); // 步骤五 绘制干扰线 graphics.setColor(getRandColor(160, 200)); int x1; int x2; int y1; int y2; for (int i = 0; i &lt; 30; i++) &#123; x1 = random.nextInt(width); x2 = random.nextInt(12); y1 = random.nextInt(height); y2 = random.nextInt(12); graphics.drawLine(x1, y1, x1 + x2, x2 + y2); &#125; // 将上面图片输出到浏览器 ImageIO graphics.dispose();// 释放资源 ImageIO.write(bufferedImage, \"jpg\", response.getOutputStream()); &#125; public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125; /** * 取其某一范围的color * * @param fc * int 范围参数1 * @param bc * int 范围参数2 * @return Color */ private Color getRandColor(int fc, int bc) &#123; // 取其随机颜色 Random random = new Random(); if (fc &gt; 255) &#123; fc = 255; &#125; if (bc &gt; 255) &#123; bc = 255; &#125; int r = fc + random.nextInt(bc - fc); int g = fc + random.nextInt(bc - fc); int b = fc + random.nextInt(bc - fc); return new Color(r, g, b); &#125;&#125; 改良版使用10以内的加减法，避免用太大的数计算导致计算量过大","raw":"---\ntitle: servlet绘制验证码\ndate: 2019-01-9 18:34:30\ntags:\n---\n\n\n###servlet在线生成验证码\n\n\n\n####初步生成版\n\n```JAVA\npackage work.eggroll.servlet;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Random;\n\n@WebServlet(\"/访问路径\")\npublic class CheckCodeServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n\n        int width = 100;\n        int height = 50;\n\n        //1.创建一对象，在内存中图片(验证码图片对象)\n        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);\n\n\n        //2.美化图片\n        //2.1 填充背景色\n        Graphics g = image.getGraphics();//画笔对象\n        g.setColor(Color.PINK);//设置画笔颜色\n        g.fillRect(0,0,width,height);\n\n        //2.2画边框\n        g.setColor(Color.black);\n        g.drawRect(0,0,width - 1,height - 1);\n\n        String str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789\";\n        //生成随机角标\n        Random ran = new Random();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= 4; i++) {\n            int index = ran.nextInt(str.length());\n            //获取字符\n            char ch = str.charAt(index);//随机字符\n            sb.append(ch);\n\n            //2.3写验证码\n            g.drawString(ch+\"\",width/5*i,height/2);\n        }\n\n        //2.4画干扰线\n        g.setColor(Color.red);\n\n        //随机生成坐标点\n\n        for (int i = 0; i < 10; i++) {\n            int x1 = ran.nextInt(width);\n            int x2 = ran.nextInt(width);\n\n            int y1 = ran.nextInt(height);\n            int y2 = ran.nextInt(height);\n            g.drawLine(x1,y1,x2,y2);\n        }\n\n\n        //3.将图片输出到页面展示\n        ImageIO.write(image,\"jpg\",response.getOutputStream());\n\n\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this.doPost(request,response);\n    }\n}\n\n```\n\n\n\n<img src=\"./images/1.png\" alt=\"图片被猫偷走了\" style=\"zoom:150%;\" />\n\n\n\n####加强版\n\n```java\npackage work.eggroll.web.servlet;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Random;\n\n/**\n * 生成验证码图片\n * \n * \n */\n@WebServlet(\"/访问路径\")\npublic class CheckCodeServlet extends HttpServlet {\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tint width = 130;\n\t\tint height = 35;\n\n\t\t// 步骤一 绘制一张内存中图片\n\t\tBufferedImage bufferedImage = new BufferedImage(width, height,\n\t\t\t\tBufferedImage.TYPE_INT_RGB);\n\n\t\t// 步骤二 图片绘制背景颜色 ---通过绘图对象\n\t\tGraphics graphics = bufferedImage.getGraphics();// 得到画图对象 --- 画笔\n\t\t// 绘制任何图形之前 都必须指定一个颜色\n\t\tgraphics.setColor(getRandColor(200, 250));\n\t\tgraphics.fillRect(0, 0, width, height);\n\n\t\t// 步骤三 绘制边框\n\t\tgraphics.setColor(Color.WHITE);\n\t\tgraphics.drawRect(0, 0, width - 1, height - 1);\n\n\t\t// 步骤四 四个随机数字\n\t\tGraphics2D graphics2d = (Graphics2D) graphics;\n\t\t// 设置输出字体\n\t\tgraphics2d.setFont(new Font(\"宋体\", Font.BOLD, 28));\n\n\t\tString words =\"0123456789\";\n\t\tString operators=\"+-*\";\n\t\tRandom random = new Random();// 生成随机数\n\t\t\n\t\t//定义StringBuilder拼接验证码字符\n\t\tStringBuilder sBuilder=new StringBuilder();\n\t\t// 定义x坐标\n\t\tint x = 10;\n\t\t//定义数组保存生成的数字，后面计算结果使用\n\t\tint[] nums=new int[2];\n\t\t//定义变量保存运算符，后面计算结果使用\n\t\tString operator=\"\";\n\t\tfor (int i = 0; i < 2; i++) {\n\t\t\t// 随机颜色\n\t\t\tgraphics2d.setColor(new Color(20 + random.nextInt(110), 20 + random\n\t\t\t\t\t.nextInt(110), 20 + random.nextInt(110)));\n\t\t\t// 旋转 -30 --- 30度\n\t\t\tint jiaodu = random.nextInt(60) - 30;\n\t\t\t// 换算弧度\n\t\t\tdouble theta = jiaodu * Math.PI / 180;\n\n\t\t\t// 生成一个随机数字\n\t\t\tint index = random.nextInt(words.length()); // 生成随机数 0 到 length - 1\n\t\t\t// 获得数字\n\t\t\tchar c = words.charAt(index);\n\t\t\t//保存到数组中,后面计算结果用\n\t\t\tnums[i]=Integer.parseInt(c+\"\");\n\t\t\t//拼接字符\n\t\t\tsBuilder.append(c);\n\t\t\t// 将c 输出到图片\n\t\t\tgraphics2d.rotate(theta, x, 20);\n\t\t\tgraphics2d.drawString(String.valueOf(c), x, 25);\n\t\t\tgraphics2d.rotate(-theta, x, 20);\n\t\t\tx += 30;\n\n\t\t\t//生成运算符\n\t\t\tif(i==0){\n\t\t\t\t// 生成一个随机数字\n\t\t\t\tindex = random.nextInt(operators.length()); // 生成随机数 0 到 length - 1\n\t\t\t\t// 获得运算符\n\t\t\t\toperator = operators.charAt(index)+\"\";\n\t\t\t\t//拼接字符\n\t\t\t\tsBuilder.append(operator);\n\t\t\t\t// 将c 输出到图片\n\t\t\t\tgraphics2d.drawString(operator, x, 25);\n\t\t\t}else{\n\t\t\t\t//拼接=号\n\t\t\t\tsBuilder.append(\"=\");\n\t\t\t\t// 将c 输出到图片\n\t\t\t\tgraphics2d.drawString(\"=\", x, 25);\n\t\t\t}\n\t\t\tx += 30;\n\t\t}\n\t\t//计算结果\n\t\tint result=0;\n\t\tif(\"+\".equals(operator)){\n\t\t\tresult=nums[0]+nums[1];\n\t\t}else if(\"-\".equals(operator)){\n\t\t\tresult=nums[0]-nums[1];\n\t\t}else{\n\t\t\tresult=nums[0]*nums[1];\n\t\t}\n\n\t\t//控制台打印验证码和计算结果\n\t\tSystem.out.println(nums[0]+operator+nums[1]+\"=\"+result);\n\t\t// 步骤五 绘制干扰线\n\t\tgraphics.setColor(getRandColor(160, 200));\n\t\tint x1;\n\t\tint x2;\n\t\tint y1;\n\t\tint y2;\n\t\tfor (int i = 0; i < 30; i++) {\n\t\t\tx1 = random.nextInt(width);\n\t\t\tx2 = random.nextInt(12);\n\t\t\ty1 = random.nextInt(height);\n\t\t\ty2 = random.nextInt(12);\n\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);\n\t\t}\n\n\t\t// 将上面图片输出到浏览器 ImageIO\n\t\tgraphics.dispose();// 释放资源\n\t\tImageIO.write(bufferedImage, \"jpg\", response.getOutputStream());\n\t\t\n\t}\n\n\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tdoGet(request, response);\n\t}\n\n\t/**\n\t * 取其某一范围的color\n\t * \n\t * @param fc\n\t *            int 范围参数1\n\t * @param bc\n\t *            int 范围参数2\n\t * @return Color\n\t */\n\tprivate Color getRandColor(int fc, int bc) {\n\t\t// 取其随机颜色\n\t\tRandom random = new Random();\n\t\tif (fc > 255) {\n\t\t\tfc = 255;\n\t\t}\n\t\tif (bc > 255) {\n\t\t\tbc = 255;\n\t\t}\n\t\tint r = fc + random.nextInt(bc - fc);\n\t\tint g = fc + random.nextInt(bc - fc);\n\t\tint b = fc + random.nextInt(bc - fc);\n\t\treturn new Color(r, g, b);\n\t}\n\n}\n\n```\n\n改良版使用10以内的加减法，避免用太大的数计算导致计算量过大\n\n<img src=\"./images/2.png\" alt=\"图片被猫偷走了\" style=\"zoom: 150%;\" />","content":"<p>###servlet在线生成验证码</p>\n<p>####初步生成版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> work.eggroll.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/访问路径\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckCodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.美化图片</span></span><br><span class=\"line\">        <span class=\"comment\">//2.1 填充背景色</span></span><br><span class=\"line\">        Graphics g = image.getGraphics();<span class=\"comment\">//画笔对象</span></span><br><span class=\"line\">        g.setColor(Color.PINK);<span class=\"comment\">//设置画笔颜色</span></span><br><span class=\"line\">        g.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.2画边框</span></span><br><span class=\"line\">        g.setColor(Color.black);</span><br><span class=\"line\">        g.drawRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width - <span class=\"number\">1</span>,height - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String str = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//生成随机角标</span></span><br><span class=\"line\">        Random ran = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = ran.nextInt(str.length());</span><br><span class=\"line\">            <span class=\"comment\">//获取字符</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = str.charAt(index);<span class=\"comment\">//随机字符</span></span><br><span class=\"line\">            sb.append(ch);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//2.3写验证码</span></span><br><span class=\"line\">            g.drawString(ch+<span class=\"string\">\"\"</span>,width/<span class=\"number\">5</span>*i,height/<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.4画干扰线</span></span><br><span class=\"line\">        g.setColor(Color.red);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//随机生成坐标点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x1 = ran.nextInt(width);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x2 = ran.nextInt(width);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> y1 = ran.nextInt(height);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y2 = ran.nextInt(height);</span><br><span class=\"line\">            g.drawLine(x1,y1,x2,y2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.将图片输出到页面展示</span></span><br><span class=\"line\">        ImageIO.write(image,<span class=\"string\">\"jpg\"</span>,response.getOutputStream());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doPost(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"./images/1.png\" alt=\"图片被猫偷走了\" style=\"zoom:150%;\">\n\n\n\n<p>####加强版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> work.eggroll.web.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成验证码图片</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/访问路径\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckCodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> width = <span class=\"number\">130</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> height = <span class=\"number\">35</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤一 绘制一张内存中图片</span></span><br><span class=\"line\">\t\tBufferedImage bufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">\t\t\t\tBufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤二 图片绘制背景颜色 ---通过绘图对象</span></span><br><span class=\"line\">\t\tGraphics graphics = bufferedImage.getGraphics();<span class=\"comment\">// 得到画图对象 --- 画笔</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 绘制任何图形之前 都必须指定一个颜色</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">200</span>, <span class=\"number\">250</span>));</span><br><span class=\"line\">\t\tgraphics.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤三 绘制边框</span></span><br><span class=\"line\">\t\tgraphics.setColor(Color.WHITE);</span><br><span class=\"line\">\t\tgraphics.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width - <span class=\"number\">1</span>, height - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤四 四个随机数字</span></span><br><span class=\"line\">\t\tGraphics2D graphics2d = (Graphics2D) graphics;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置输出字体</span></span><br><span class=\"line\">\t\tgraphics2d.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">28</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString words =<span class=\"string\">\"0123456789\"</span>;</span><br><span class=\"line\">\t\tString operators=<span class=\"string\">\"+-*\"</span>;</span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();<span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义StringBuilder拼接验证码字符</span></span><br><span class=\"line\">\t\tStringBuilder sBuilder=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义x坐标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义数组保存生成的数字，后面计算结果使用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] nums=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义变量保存运算符，后面计算结果使用</span></span><br><span class=\"line\">\t\tString operator=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 随机颜色</span></span><br><span class=\"line\">\t\t\tgraphics2d.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random</span><br><span class=\"line\">\t\t\t\t\t.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>)));</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 旋转 -30 --- 30度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> jiaodu = random.nextInt(<span class=\"number\">60</span>) - <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 换算弧度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> theta = jiaodu * Math.PI / <span class=\"number\">180</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 生成一个随机数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = random.nextInt(words.length()); <span class=\"comment\">// 生成随机数 0 到 length - 1</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获得数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> c = words.charAt(index);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//保存到数组中,后面计算结果用</span></span><br><span class=\"line\">\t\t\tnums[i]=Integer.parseInt(c+<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//拼接字符</span></span><br><span class=\"line\">\t\t\tsBuilder.append(c);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将c 输出到图片</span></span><br><span class=\"line\">\t\t\tgraphics2d.rotate(theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.drawString(String.valueOf(c), x, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.rotate(-theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tx += <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//生成运算符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 生成一个随机数字</span></span><br><span class=\"line\">\t\t\t\tindex = random.nextInt(operators.length()); <span class=\"comment\">// 生成随机数 0 到 length - 1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得运算符</span></span><br><span class=\"line\">\t\t\t\toperator = operators.charAt(index)+<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//拼接字符</span></span><br><span class=\"line\">\t\t\t\tsBuilder.append(operator);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 将c 输出到图片</span></span><br><span class=\"line\">\t\t\t\tgraphics2d.drawString(operator, x, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//拼接=号</span></span><br><span class=\"line\">\t\t\t\tsBuilder.append(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 将c 输出到图片</span></span><br><span class=\"line\">\t\t\t\tgraphics2d.drawString(<span class=\"string\">\"=\"</span>, x, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tx += <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//计算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"string\">\"+\"</span>.equals(operator))&#123;</span><br><span class=\"line\">\t\t\tresult=nums[<span class=\"number\">0</span>]+nums[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"-\"</span>.equals(operator))&#123;</span><br><span class=\"line\">\t\t\tresult=nums[<span class=\"number\">0</span>]-nums[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tresult=nums[<span class=\"number\">0</span>]*nums[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//控制台打印验证码和计算结果</span></span><br><span class=\"line\">\t\tSystem.out.println(nums[<span class=\"number\">0</span>]+operator+nums[<span class=\"number\">1</span>]+<span class=\"string\">\"=\"</span>+result);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤五 绘制干扰线</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">160</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tx1 = random.nextInt(width);</span><br><span class=\"line\">\t\t\tx2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\ty1 = random.nextInt(height);</span><br><span class=\"line\">\t\t\ty2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将上面图片输出到浏览器 ImageIO</span></span><br><span class=\"line\">\t\tgraphics.dispose();<span class=\"comment\">// 释放资源</span></span><br><span class=\"line\">\t\tImageIO.write(bufferedImage, <span class=\"string\">\"jpg\"</span>, response.getOutputStream());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 取其某一范围的color</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数1</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> bc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数2</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> Color</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc, <span class=\"keyword\">int</span> bc)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取其随机颜色</span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tfc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tbc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r, g, b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改良版使用10以内的加减法，避免用太大的数计算导致计算量过大</p>\n<img src=\"./images/2.png\" alt=\"图片被猫偷走了\" style=\"zoom: 150%;\">","slug":"servlet绘制验证码","updated":"2019-09-26T08:39:14.056Z","comments":true,"link":"","permalink":"http://www.bigeggroll.work/2019/01/09/servlet绘制验证码/","excerpt":"","categories":[],"tags":[]}]}